#mean(sorted[0:124])
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
sort(parse_number(clean_sal))
#better_cleaned <- as.numeric(clean_sal)
#better_cleaned
#as.numeric(better_cleaned)
#ranked<-
#  plr_sal %>%
#  filter(rank(desc(`Salary ($)`)) <=125)
#mean(ranked$`Salary ($)`)
#View(sorted)
#View(ranked)
#mean(sorted[0:124])
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
sort(parse_number(clean_sal), decreasing = TRUE)
#better_cleaned <- as.numeric(clean_sal)
#better_cleaned
#as.numeric(better_cleaned)
#ranked<-
#  plr_sal %>%
#  filter(rank(desc(`Salary ($)`)) <=125)
#mean(ranked$`Salary ($)`)
#View(sorted)
#View(ranked)
#mean(sorted[0:124])
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
#better_cleaned <- as.numeric(clean_sal)
#better_cleaned
#as.numeric(better_cleaned)
#ranked<-
#  plr_sal %>%
#  filter(rank(desc(`Salary ($)`)) <=125)
#mean(ranked$`Salary ($)`)
#View(sorted)
#View(ranked)
#mean(sorted[0:124])
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
top125_avg <- mean(sorted[0:125])
#better_cleaned <- as.numeric(clean_sal)
#better_cleaned
#as.numeric(better_cleaned)
#ranked<-
#  plr_sal %>%
#  filter(rank(desc(`Salary ($)`)) <=125)
#mean(ranked$`Salary ($)`)
#View(sorted)
#View(ranked)
#mean(sorted[0:124])
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
top125_avg <- mean(sorted[0:125])
print('The monetary value of a upcoming Qualifying Offer is $',top125_avg)
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
top125_avg <- mean(sorted[0:125])
'The monetary value of a upcoming Qualifying Offer is $',top125_avg
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
top125_avg <- mean(sorted[0:125])
'The monetary value of a upcoming Qualifying Offer is $'+top125_avg
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
top125_avg <- mean(sorted[0:125])
paste('The monetary value of a upcoming Qualifying Offer is $' ,top125_avg)
#better_cleaned <- as.numeric(clean_sal)
#better_cleaned
#as.numeric(better_cleaned)
#ranked<-
#  plr_sal %>%
#  filter(rank(desc(`Salary ($)`)) <=125)
#mean(ranked$`Salary ($)`)
#View(sorted)
#View(ranked)
#mean(sorted[0:124])
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
top125_avg <- mean(sorted[0:125])
top125_avg
paste('The monetary value of a upcoming Qualifying Offer is $' ,top125_avg)
#better_cleaned <- as.numeric(clean_sal)
#better_cleaned
#as.numeric(better_cleaned)
#ranked<-
#  plr_sal %>%
#  filter(rank(desc(`Salary ($)`)) <=125)
#mean(ranked$`Salary ($)`)
#View(sorted)
#View(ranked)
#mean(sorted[0:124])
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
top125_avg <- mean(sorted[0:124])
top125_avg
paste('The monetary value of a upcoming Qualifying Offer is $' ,top125_avg)
#better_cleaned <- as.numeric(clean_sal)
#better_cleaned
#as.numeric(better_cleaned)
#ranked<-
#  plr_sal %>%
#  filter(rank(desc(`Salary ($)`)) <=125)
#mean(ranked$`Salary ($)`)
#View(sorted)
#View(ranked)
#mean(sorted[0:124])
help("mean")
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
top125_avg <- mean(sorted[0:124], )
round(top125_avg, digits = 0)
paste('The monetary value of a upcoming Qualifying Offer is $' ,top125_avg)
#better_cleaned <- as.numeric(clean_sal)
#better_cleaned
#as.numeric(better_cleaned)
#ranked<-
#  plr_sal %>%
#  filter(rank(desc(`Salary ($)`)) <=125)
#mean(ranked$`Salary ($)`)
#View(sorted)
#View(ranked)
#mean(sorted[0:124])
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
top125_avg <- mean(sorted[0:124] )
round(top125_avg, digits = 0)
paste('The monetary value of a upcoming Qualifying Offer is $' ,top125_avg)
#better_cleaned <- as.numeric(clean_sal)
#better_cleaned
#as.numeric(better_cleaned)
#ranked<-
#  plr_sal %>%
#  filter(rank(desc(`Salary ($)`)) <=125)
#mean(ranked$`Salary ($)`)
#View(sorted)
#View(ranked)
#mean(sorted[0:124])
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
top125_avg <- mean(sorted[0:124] )
round(top125_avg, digits = 0)
#paste('The monetary value of a upcoming Qualifying Offer is $' ,top125_avg)
#better_cleaned <- as.numeric(clean_sal)
#better_cleaned
#as.numeric(better_cleaned)
#ranked<-
#  plr_sal %>%
#  filter(rank(desc(`Salary ($)`)) <=125)
#mean(ranked$`Salary ($)`)
#View(sorted)
#View(ranked)
#mean(sorted[0:124])
#Intall necessary packages
#install.packages('rvest')
#install.packages('stringr')
#install.packages('tidyr')
#install.packages('readr')
install.packages('scales')
install.packages("scales")
install.packages("scales")
knitr::opts_chunk$set(echo = TRUE)
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
library(scales)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
#Load in relevant packages
library(DataComputing)
library(rvest)
library(stringr)
library(tidyr)
library(readr)
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
library(scales)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
top125_avg <- mean(sorted[0:124] )
#paste('The monetary value of a upcoming Qualifying Offer is $' ,top125_avg)
#better_cleaned <- as.numeric(clean_sal)
#better_cleaned
#as.numeric(better_cleaned)
#ranked<-
#  plr_sal %>%
#  filter(rank(desc(`Salary ($)`)) <=125)
#mean(ranked$`Salary ($)`)
#View(sorted)
#View(ranked)
#mean(sorted[0:124])
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
library(scales)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
top125_avg <- mean(sorted[0:124] )
dollar_format(top125_avg)
#paste('The monetary value of a upcoming Qualifying Offer is $' ,top125_avg)
#better_cleaned <- as.numeric(clean_sal)
#better_cleaned
#as.numeric(better_cleaned)
#ranked<-
#  plr_sal %>%
#  filter(rank(desc(`Salary ($)`)) <=125)
#mean(ranked$`Salary ($)`)
#View(sorted)
#View(ranked)
#mean(sorted[0:124])
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
library(scales)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
top125_avg <- mean(sorted[0:124] )
dollar_format()(top125_avg)
#paste('The monetary value of a upcoming Qualifying Offer is $' ,top125_avg)
#better_cleaned <- as.numeric(clean_sal)
#better_cleaned
#as.numeric(better_cleaned)
#ranked<-
#  plr_sal %>%
#  filter(rank(desc(`Salary ($)`)) <=125)
#mean(ranked$`Salary ($)`)
#View(sorted)
#View(ranked)
#mean(sorted[0:124])
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
library(scales)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
top125_avg <- mean(sorted[0:124] )
QO <- dollar_format()(top125_avg)
#paste('The monetary value of a upcoming Qualifying Offer is $' ,top125_avg)
#better_cleaned <- as.numeric(clean_sal)
#better_cleaned
#as.numeric(better_cleaned)
#ranked<-
#  plr_sal %>%
#  filter(rank(desc(`Salary ($)`)) <=125)
#mean(ranked$`Salary ($)`)
#View(sorted)
#View(ranked)
#mean(sorted[0:124])
#clean_sal <- gsub( '^\\$+', '',plr_sal$`Salary ($)`)
library(scales)
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
top125_avg <- mean(sorted[0:124] )
QO <- dollar_format()(top125_avg)
paste('The monetary value of a upcoming Qualifying Offer is',QO)
#better_cleaned <- as.numeric(clean_sal)
#better_cleaned
#as.numeric(better_cleaned)
#ranked<-
#  plr_sal %>%
#  filter(rank(desc(`Salary ($)`)) <=125)
#mean(ranked$`Salary ($)`)
#View(sorted)
#View(ranked)
#mean(sorted[0:124])
#Load in relevant packages
library(DataComputing)
library(rvest)
library(stringr)
library(tidyr)
library(readr)
library(scales)
#Load in relevant packages
library(DataComputing)
library(rvest)
library(stringr)
library(tidyr)
library(readr)
library(scales)
#Read the url
url <- 'https://questionnaire-148920.appspot.com/swe/'
webpage <- read_html(url)
knitr::opts_chunk$set(echo = TRUE)
#Intall necessary packages
#install.packages('DataComputing')
#install.packages('rvest')
#install.packages('stringr')
#install.packages('tidyr')
#install.packages('readr')
#install.packages('scales')
#Load in relevant packages
library(DataComputing)
library(rvest)
library(stringr)
library(tidyr)
library(readr)
library(scales)
#Read the url
url <- 'https://questionnaire-148920.appspot.com/swe/'
webpage <- read_html(url)
#Creates the data table from web scraped data and returns the first 6 rows
mlb_table <- html_nodes(webpage, 'table')
#Load in relevant packages
library(DataComputing)
library(rvest)
library(stringr)
library(tidyr)
library(readr)
library(scales)
#Read the url
url <- 'https://questionnaire-148920.appspot.com/swe/'
webpage <- read_html(url)
knitr::opts_chunk$set(echo = TRUE)
#Load in relevant packages
library(DataComputing)
library(rvest)
library(stringr)
library(tidyr)
library(readr)
library(scales)
#Read the url
url <- 'https://questionnaire-148920.appspot.com/swe/'
webpage <- read_html(url)
#Creates the data table from web scraped data and returns the first 6 rows
mlb_table <- html_nodes(webpage, 'table')
plr_sal <- html_table(mlb_table)[[1]]
names(plr_sal) <- c("Player Name", "Salary ($)")
head(plr_sal)
#Data Cleaning: removed rows with no salary data (only 18 cases)
plr_sal<-(
plr_sal %>%
filter(`Salary ($)`!= 'no salary data')
)
head(plr_sal)
#Strip Salaries of punctuation and sort them into descending order
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
#Take the average of the top 125 salaries and format correctly
top125_avg <- mean(sorted[0:124] )
QO <- dollar_format()(top125_avg)
#Prints what the Qualifying Offer will be
paste('The monetary value of an upcoming Qualifying Offer is',QO)
#Data Cleaning: removed rows with no salary data (only 18 cases)
clean_sal<-(
plr_sal %>%
filter(`Salary ($)`!= 'no salary data')
)
head(plr_sal)
#Strip Salaries of punctuation and sort them into descending order
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
#Load in relevant packages
library(DataComputing)
library(rvest)
library(stringr)
library(tidyr)
library(readr)
library(scales)
#Read the url
url <- 'https://questionnaire-148920.appspot.com/swe/'
webpage <- read_html(url)
#Creates the data table from web scraped data and returns the first 6 rows
mlb_table <- html_nodes(webpage, 'table')
plr_sal <- html_table(mlb_table)[[1]]
names(plr_sal) <- c("Player Name", "Salary ($)")
head(plr_sal)
#Data Cleaning: removed rows with no salary data (only 18 cases)
clean_sal<-(
plr_sal %>%
filter(`Salary ($)`!= 'no salary data')
)
head(plr_sal)
#Strip Salaries of punctuation and sort them into descending order
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
#Data Cleaning: removed rows with no salary data (only 18 cases)
clean_sal<-(
plr_sal %>%
filter(`Salary ($)`!= 'no salary data')
)
head(plr_sal)
#Strip Salaries of punctuation and sort them into descending order
sorted <- sort(parse_number(clean_sal), decreasing = TRUE)
#Strip Salaries of punctuation and sort them into descending order
sorted <- sort(parse_number(clean_sal$`Salary ($)`), decreasing = TRUE)
#Take the average of the top 125 salaries and format correctly
top125_avg <- mean(sorted[0:124] )
QO <- dollar_format()(top125_avg)
#Prints what the Qualifying Offer will be
paste('The monetary value of an upcoming Qualifying Offer is',QO)
#Data Cleaning: removed rows with no salary data
clean_sal<-(
plr_sal %>%
filter(`Salary ($)`!= 'no salary data')
)
head(plr_sal)
plot(sorted)
grph <- parse_number(clean_sal$`Salary ($)`)
grph <- parse_number(clean_sal$`Salary ($)`)
distributionGraphHelper(grph)
grph <- parse_number(clean_sal$`Salary ($)`)
plot(grph)
help("distributionGraphHelper")
grph <- parse_number(clean_sal$`Salary ($)`)
distributionGraphHelper(grph, format = "histogram", title = "Distribution of Salaries")
#Creates the data table from web scraped data and returns the first 6 rows
mlb_table <- html_nodes(webpage, 'table')
plr_sal <- html_table(mlb_table)[[1]]
names(plr_sal) <- c("Player Name", "Salary ($)")
kable(head(plr_sal))
library(knitr)
#Creates the data table from web scraped data and returns the first 6 rows
mlb_table <- html_nodes(webpage, 'table')
plr_sal <- html_table(mlb_table)[[1]]
names(plr_sal) <- c("Player Name", "Salary ($)")
kable(head(plr_sal))
#Install necessary packages
install.packages('DataComputing')
install.packages('rvest')
install.packages('stringr')
install.packages('tidyr')
install.packages('readr')
install.packages('scales')
install.packages("DataComputing")
install.packages("readr")
knitr::opts_chunk$set(echo = TRUE)
#Install necessary packages
install.packages('DataComputing')
install.packages('rvest')
install.packages('stringr')
install.packages('tidyr')
install.packages('readr')
install.packages('scales')
#Install necessary packages
install.packages('DataComputing')
install.packages('rvest')
install.packages('stringr')
install.packages('tidyr')
install.packages('readr')
install.packages('scales')
#Install necessary packages
install.packages('DataComputing')
install.packages('rvest')
install.packages('stringr')
install.packages('tidyr')
install.packages('readr')
install.packages('scales')
#Install necessary packages
install.packages('DataComputing')
install.packages('rvest')
install.packages('stringr')
#Load in relevant packages
library(DataComputing)
library(rvest)
library(stringr)
library(tidyr)
library(readr)
#Load in relevant packages
library(DataComputing)
library(rvest)
library(stringr)
library(tidyr)
library(readr)
install.packages("readr")
#Load in relevant packages
library(DataComputing)
library(rvest)
library(stringr)
library(tidyr)
library(readr)
#Load in relevant packages
library('DataComputing')
library('rvest')
library('stringr')
library('tidyr')
library('readr')
knitr::opts_chunk$set(echo = TRUE)
#Install necessary packages
install.packages('DataComputing')
install.packages('rvest')
install.packages('stringr')
install.packages('tidyr')
install.packages('readr')
install.packages('scales')
install.packages("DataComputing")
knitr::opts_chunk$set(echo = TRUE)
#Load in relevant packages
library('DataComputing')
library('rvest')
library('stringr')
library('tidyr')
library('readr')
#Read the url
url <- 'https://questionnaire-148920.appspot.com/swe/'
webpage <- read_html(url)
#Creates the data table from web scraped data and returns the first 6 rows
mlb_table <- html_nodes(webpage, 'table')
plr_sal <- html_table(mlb_table)[[1]]
names(plr_sal) <- c("Player Name", "Salary ($)")
kable(head(plr_sal))
#Install necessary packages
install.packages('DataComputing')
install.packages('rvest')
install.packages('stringr')
install.packages('tidyr')
install.packages('readr')
install.packages('scales')
install.packages("DataComputing")
install.packages("tidyr")
install.packages("scales")
knitr::opts_chunk$set(echo = TRUE)
#Install necessary packages
#install.packages('DataComputing')
#install.packages('rvest')
#install.packages('stringr')
#install.packages('tidyr')
#install.packages('readr')
#install.packages('scales')
#Load in relevant packages
library('DataComputing')
library('rvest')
library('stringr')
library('tidyr')
library('readr')
#Load in relevant packages
library('DataComputing')
#Load in relevant packages
library('DataComputing')
#Read the url
url <- 'https://questionnaire-148920.appspot.com/swe/'
webpage <- read_html(url)
